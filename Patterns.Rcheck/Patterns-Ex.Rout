
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Patterns"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "Patterns-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('Patterns')

Attaching package: ‘Patterns’

The following object is masked from ‘package:stats’:

    predict

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CLL")
> ### * CLL
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CLL
> ### Title: Expression data from healthy and malignant (chronic lymphocytic
> ###   leukemia, CLL) human B-lymphocytes after B-cell receptor stimulation
> ###   (GSE 39411 dataset)
> ### Aliases: CLL
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(CLL)
> str(CLL)
'data.frame':	54675 obs. of  154 variables:
 $ probeset                                                                             : chr  "1007_s_at" "1053_at" "117_at" "121_at" ...
 $ nom                                                                                  : chr  "DDR1 or MIR4640" "RFC2" "HSPA6" "PAX8" ...
 $ Healthy.B.cell..subject.N1_unstimulated.cells_at.60min                               : num  561 221 270 678 142 ...
 $ Healthy.B.cell..subject.N1_unstimulated.cells_at.90min                               : num  557 216 263 598 136 ...
 $ Healthy.B.cell..subject.N1_unstimulated.cells_at.210min                              : num  561 229 244 618 145 ...
 $ Healthy.B.cell..subject.N1_unstimulated.cells_at.390min                              : num  647 224 252 716 135 ...
 $ Healthy.B.cell..subject.N1_stimulated.cells_at.60min                                 : num  566 217 279 659 144 ...
 $ Healthy.B.cell..subject.N1_stimulated.cells_at.90min                                 : num  584 203 246 625 126 ...
 $ Healthy.B.cell..subject.N1_stimulated.cells_at.210min                                : num  522 210 241 590 140 ...
 $ Healthy.B.cell..subject.N1_stimulated.cells_at.390min                                : num  561 210 241 676 138 ...
 $ Healthy.B.cell..subject.N2_unstimulated.cells_at.60min                               : num  458 216 259 516 136 ...
 $ Healthy.B.cell..subject.N2_unstimulated.cells_at.90min                               : num  570 224 264 636 137 ...
 $ Healthy.B.cell..subject.N2_unstimulated.cells_at.210min                              : num  573 216 255 574 141 ...
 $ Healthy.B.cell..subject.N2_unstimulated.cells_at.390min                              : num  583 224 253 612 122 ...
 $ Healthy.B.cell..subject.N2_stimulated.cells_at.60min                                 : num  602 229 294 686 149 ...
 $ Healthy.B.cell..subject.N2_stimulated.cells_at.90min                                 : num  539 224 290 670 139 ...
 $ Healthy.B.cell..subject.N2_stimulated.cells_at.210min                                : num  531 220 261 585 140 ...
 $ Healthy.B.cell..subject.N2_stimulated.cells_at.390min                                : num  570 219 250 568 128 ...
 $ Healthy.B.cell..subject.N3_unstimulated.cells_at.60min                               : num  560 250 250 609 149 ...
 $ Healthy.B.cell..subject.N3_unstimulated.cells_at.90min                               : num  632 240 245 657 146 ...
 $ Healthy.B.cell..subject.N3_unstimulated.cells_at.210min                              : num  651 248 255 723 128 ...
 $ Healthy.B.cell..subject.N3_unstimulated.cells_at.390min                              : num  626 235 240 677 140 ...
 $ Healthy.B.cell..subject.N3_stimulated.cells_at.60min                                 : num  555 251 252 620 139 ...
 $ Healthy.B.cell..subject.N3_stimulated.cells_at.90min                                 : num  605 247 242 715 127 ...
 $ Healthy.B.cell..subject.N3_stimulated.cells_at.210min                                : num  449 227 236 479 124 ...
 $ Healthy.B.cell..subject.N3_stimulated.cells_at.390min                                : num  543 229 242 683 134 ...
 $ Healthy.B.cell..subject.N4_unstimulated.cells_at.60min                               : num  589 255 257 688 147 ...
 $ Healthy.B.cell..subject.N4_unstimulated.cells_at.90min                               : num  614 244 243 607 137 ...
 $ Healthy.B.cell..subject.N4_unstimulated.cells_at.210min                              : num  611 238 253 691 138 ...
 $ Healthy.B.cell..subject.N4_unstimulated.cells_at.390min                              : num  601 252 270 711 133 ...
 $ Healthy.B.cell..subject.N4_stimulated.cells_at.60min                                 : num  586 255 253 637 142 ...
 $ Healthy.B.cell..subject.N4_stimulated.cells_at.90min                                 : num  582 230 240 672 137 ...
 $ Healthy.B.cell..subject.N4_stimulated.cells_at.210min                                : num  537 236 255 675 140 ...
 $ Healthy.B.cell..subject.N4_stimulated.cells_at.390min                                : num  574 240 257 656 141 ...
 $ Healthy.B.cell..subject.N5_unstimulated.cells_at.60min                               : num  525 241 268 629 149 ...
 $ Healthy.B.cell..subject.N5_unstimulated.cells_at.90min                               : num  560 240 284 710 154 ...
 $ Healthy.B.cell..subject.N5_unstimulated.cells_at.210min                              : num  604 255 256 673 141 ...
 $ Healthy.B.cell..subject.N5_unstimulated.cells_at.390min                              : num  568 235 258 642 131 ...
 $ Healthy.B.cell..subject.N5_stimulated.cells_at.60min                                 : num  560 250 272 699 150 ...
 $ Healthy.B.cell..subject.N5_stimulated.cells_at.90min                                 : num  549 226 259 687 140 ...
 $ Healthy.B.cell..subject.N5_stimulated.cells_at.210min                                : num  563 231 280 683 146 ...
 $ Healthy.B.cell..subject.N5_stimulated.cells_at.390min                                : num  592 248 264 741 157 ...
 $ Healthy.B.cell..subject.N6_unstimulated.cells_at.60min                               : num  627 243 268 680 140 ...
 $ Healthy.B.cell..subject.N6_unstimulated.cells_at.90min                               : num  620 237 278 729 139 ...
 $ Healthy.B.cell..subject.N6_unstimulated.cells_at.210min                              : num  619 233 264 689 142 ...
 $ Healthy.B.cell..subject.N6_unstimulated.cells_at.390min                              : num  553 240 265 749 144 ...
 $ Healthy.B.cell..subject.N6_stimulated.cells_at.60min                                 : num  576 251 279 678 142 ...
 $ Healthy.B.cell..subject.N6_stimulated.cells_at.90min                                 : num  584 227 287 691 154 ...
 $ Healthy.B.cell..subject.N6_stimulated.cells_at.210min                                : num  593 225 268 719 148 ...
 $ Healthy.B.cell..subject.N6_stimulated.cells_at.390min                                : num  567 230 243 644 139 ...
 $ CLL.B.cell..patient.M1_unstimulated.cells_at.60min_.ind.                             : num  648 200 232 629 143 ...
 $ CLL.B.cell..patient.M1_unstimulated.cells_at.90min_.ind.                             : num  674 217 256 767 154 ...
 $ CLL.B.cell..patient.M1_unstimulated.cells_at.210min_.ind.                            : num  639 216 240 707 137 ...
 $ CLL.B.cell..patient.M1_unstimulated.cells_at.390min_.ind.                            : num  598 215 235 661 148 ...
 $ CLL.B.cell..patient.M1_stimulated.cells_at.60min_.ind.                               : num  609 201 234 724 138 ...
 $ CLL.B.cell..patient.M1_stimulated.cells_at.90min_.ind.                               : num  622 208 236 750 144 ...
 $ CLL.B.cell..patient.M1_stimulated.cells_at.210min_.ind.                              : num  598 193 231 721 145 ...
 $ CLL.B.cell..patient.M1_stimulated.cells_at.390min_.ind.                              : num  674 203 228 696 144 ...
 $ CLL.B.cell..patient.M4_unstimulated.cells_at.60min_.ind.                             : num  613 202 256 694 200 ...
 $ CLL.B.cell..patient.M4_unstimulated.cells_at.90min_.ind.                             : num  533 204 275 641 152 ...
 $ CLL.B.cell..patient.M4_unstimulated.cells_at.210min_.ind.                            : num  586 194 269 616 148 ...
 $ CLL.B.cell..patient.M4_unstimulated.cells_at.390min_.ind.                            : num  668 229 322 841 155 ...
 $ CLL.B.cell..patient.M4_stimulated.cells_at.60min_.ind.                               : num  560 201 225 676 153 ...
 $ CLL.B.cell..patient.M4_stimulated.cells_at.90min_.ind.                               : num  624 200 262 661 142 ...
 $ CLL.B.cell..patient.M4_stimulated.cells_at.210min_.ind.                              : num  542 229 318 703 153 ...
 $ CLL.B.cell..patient.M4_stimulated.cells_at.390min_.ind.                              : num  645 210 291 812 152 ...
 $ CLL.B.cell..patient.M5_unstimulated.cells_at.60min_.ind.                             : num  525 205 261 679 146 ...
 $ CLL.B.cell..patient.M5_unstimulated.cells_at.90min_.ind.                             : num  619 207 279 791 142 ...
 $ CLL.B.cell..patient.M5_unstimulated.cells_at.210min_.ind.                            : num  575 224 270 802 146 ...
 $ CLL.B.cell..patient.M5_unstimulated.cells_at.390min_.ind.                            : num  536 201 272 625 140 ...
 $ CLL.B.cell..patient.M5_stimulated.cells_at.60min_.ind.                               : num  605 206 292 829 148 ...
 $ CLL.B.cell..patient.M5_stimulated.cells_at.90min_.ind.                               : num  542 191 255 698 143 ...
 $ CLL.B.cell..patient.M5_stimulated.cells_at.210min_.ind.                              : num  510 200 267 692 145 ...
 $ CLL.B.cell..patient.M5_stimulated.cells_at.390min_.ind.                              : num  584 234 263 689 143 ...
 $ CLL.B.cell..patient.M6_unstimulated.cells_at.60min_.ind.                             : num  542 209 268 682 159 ...
 $ CLL.B.cell..patient.M6_unstimulated.cells_at.90min_.ind.                             : num  552 208 246 618 139 ...
 $ CLL.B.cell..patient.M6_unstimulated.cells_at.210min_.ind.                            : num  636 198 239 692 138 ...
 $ CLL.B.cell..patient.M6_unstimulated.cells_at.390min_.ind.                            : num  604 204 231 603 144 ...
 $ CLL.B.cell..patient.M6_stimulated.cells_at.60min_.ind.                               : num  567 199 277 686 139 ...
 $ CLL.B.cell..patient.M6_stimulated.cells_at.90min_.ind.                               : num  573 205 234 593 141 ...
 $ CLL.B.cell..patient.M6_stimulated.cells_at.210min_.ind.                              : num  652 203 234 577 147 ...
 $ CLL.B.cell..patient.M6_stimulated.cells_at.390min_.ind.                              : num  506 197 252 598 141 ...
 $ CLL.B.cell..patient.M7_unstimulated.cells_at.60min_.ind.                             : num  584 202 229 751 134 ...
 $ CLL.B.cell..patient.M7_unstimulated.cells_at.90min_.ind.                             : num  561 197 230 778 128 ...
 $ CLL.B.cell..patient.M7_unstimulated.cells_at.210min_.ind.                            : num  570 210 235 713 128 ...
 $ CLL.B.cell..patient.M7_unstimulated.cells_at.390min_.ind.                            : num  595 210 228 647 126 ...
 $ CLL.B.cell..patient.M7_stimulated.cells_at.60min_.ind.                               : num  528 187 218 591 134 ...
 $ CLL.B.cell..patient.M7_stimulated.cells_at.90min_.ind.                               : num  527 195 217 614 126 ...
 $ CLL.B.cell..patient.M7_stimulated.cells_at.210min_.ind.                              : num  653 216 220 737 130 ...
 $ CLL.B.cell..patient.M7_stimulated.cells_at.390min_.ind.                              : num  459 211 206 606 140 ...
 $ CLL.B.cell..patient.M8_unstimulated.cells_at.60min_.ind.                             : num  503 202 276 621 134 ...
 $ CLL.B.cell..patient.M8_unstimulated.cells_at.90min_.ind.                             : num  595 207 303 803 141 ...
 $ CLL.B.cell..patient.M8_unstimulated.cells_at.210min_.ind.                            : num  632 200 265 741 143 ...
 $ CLL.B.cell..patient.M8_unstimulated.cells_at.390min_.ind.                            : num  740 201 269 813 141 ...
 $ CLL.B.cell..patient.M8_stimulated.cells_at.60min_.ind.                               : num  493 192 301 677 132 ...
 $ CLL.B.cell..patient.M8_stimulated.cells_at.90min_.ind.                               : num  671 209 269 708 137 ...
 $ CLL.B.cell..patient.M8_stimulated.cells_at.210min_.ind.                              : num  721 213 259 848 143 ...
 $ CLL.B.cell..patient.M8_stimulated.cells_at.390min_.ind.                              : num  658 206 293 725 134 ...
 $ CLL.B.cell..patient.M2_unstimulated.cells_at.60min_.agg.                             : num  701 216 733 790 143 ...
  [list output truncated]
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CLL", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CascadeFinit")
> ### * CascadeFinit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CascadeFinit
> ### Title: Create initial F matrices for cascade networks inference.
> ### Aliases: CascadeFinit
> ### Keywords: models
> 
> ### ** Examples
> 
> CascadeFinit(3,2)
, , 1

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

, , 2

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    1    0    0
[3,]    1    1    0

, , 3

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

, , 4

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

> CascadeFinit(4,3)
, , 1

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 2

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    1    1    0    0
[4,]    1    1    1    0

, , 3

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    1    1    0    0
[4,]    1    1    1    0

, , 4

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 5

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 6

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    1    1    0    0
[4,]    1    1    1    0

, , 7

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 8

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 9

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

> CascadeFinit(3,2,low.trig=FALSE)
, , 1

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

, , 2

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    1    0    0
[3,]    0    1    0

, , 3

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

, , 4

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0

> CascadeFinit(4,3,low.trig=FALSE)
, , 1

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 2

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    0    1    0    0
[4,]    0    0    1    0

, , 3

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    0    1    0    0
[4,]    0    0    1    0

, , 4

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 5

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 6

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    1    0    0    0
[3,]    0    1    0    0
[4,]    0    0    1    0

, , 7

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 8

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

, , 9

     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CascadeFinit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CascadeFshape")
> ### * CascadeFshape
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CascadeFshape
> ### Title: Create F matrices shaped for cascade networks inference.
> ### Aliases: CascadeFshape
> ### Keywords: models
> 
> ### ** Examples
> 
> CascadeFshape(4,3)
, , 1

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 2

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "a1" "0"  "0"  "0" 
[3,] "a2" "a1" "0"  "0" 
[4,] "a3" "a2" "a1" "0" 

, , 3

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "a1" "0"  "0"  "0" 
[3,] "a2" "a1" "0"  "0" 
[4,] "a3" "a2" "a1" "0" 

, , 4

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 5

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 6

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "a1" "0"  "0"  "0" 
[3,] "a2" "a1" "0"  "0" 
[4,] "a3" "a2" "a1" "0" 

, , 7

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 8

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 9

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

> CascadeFshape(4,3)
, , 1

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 2

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "a1" "0"  "0"  "0" 
[3,] "a2" "a1" "0"  "0" 
[4,] "a3" "a2" "a1" "0" 

, , 3

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "a1" "0"  "0"  "0" 
[3,] "a2" "a1" "0"  "0" 
[4,] "a3" "a2" "a1" "0" 

, , 4

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 5

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 6

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "a1" "0"  "0"  "0" 
[3,] "a2" "a1" "0"  "0" 
[4,] "a3" "a2" "a1" "0" 

, , 7

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 8

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

, , 9

     [,1] [,2] [,3] [,4]
[1,] "0"  "0"  "0"  "0" 
[2,] "0"  "0"  "0"  "0" 
[3,] "0"  "0"  "0"  "0" 
[4,] "0"  "0"  "0"  "0" 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CascadeFshape", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IndicFinit")
> ### * IndicFinit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IndicFinit
> ### Title: Create initial F matrices using specific intergroup actions for
> ###   network inference.
> ### Aliases: IndicFinit
> ### Keywords: models
> 
> ### ** Examples
> 
> IndicFinit(3, 2, matrix(1,2,2))
, , 1

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    1    0    0
[3,]    1    1    0

, , 2

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    1    0    0
[3,]    1    1    0

, , 3

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    1    0    0
[3,]    1    1    0

, , 4

     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    1    0    0
[3,]    1    1    0

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IndicFinit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IndicFshape")
> ### * IndicFshape
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IndicFshape
> ### Title: Create F matrices using specific intergroup actions for network
> ###   inference.
> ### Aliases: IndicFshape
> ### Keywords: models
> 
> ### ** Examples
> 
> IndicFshape(3, 2, matrix(1,2,2))
, , 1

     [,1] [,2] [,3]
[1,] "0"  "0"  "0" 
[2,] "a1" "0"  "0" 
[3,] "a2" "a1" "0" 

, , 2

     [,1] [,2] [,3]
[1,] "0"  "0"  "0" 
[2,] "a1" "0"  "0" 
[3,] "a2" "a1" "0" 

, , 3

     [,1] [,2] [,3]
[1,] "0"  "0"  "0" 
[2,] "a1" "0"  "0" 
[3,] "a2" "a1" "0" 

, , 4

     [,1] [,2] [,3]
[1,] "0"  "0"  "0" 
[2,] "a1" "0"  "0" 
[3,] "a2" "a1" "0" 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IndicFshape", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Selection")
> ### * Selection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Selection
> ### Title: Selection of genes.
> ### Aliases: Selection
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Selection)
> head(Selection)
The matrix :

                   US60        US90      US210
236719_at    -2.0728409 -0.31237469  0.1792494
1563563_at   -1.4451349  1.68695159 -0.4297297
<NA>         -2.1747517  0.73649762  1.9195928
1556161_a_at -1.6446593  0.18672685  0.1240958
211786_at    -2.5257286  0.04791336  1.9459101
229665_at    -0.5663955 -0.20130401  0.1775330
...

Vector of names :
[1] "236719_at"    "1563563_at"   NA             "1556161_a_at" "211786_at"   
[6] "229665_at"   
...Vector of geneID :
     236719_at     1563563_at           <NA>   1556161_a_at      211786_at 
     "ID2-AS1"       "CCDC40"      "unknown" "LOC105379178"      "TNFRSF9" 
     229665_at 
       "CSTF3" 
...
Vector of group :
[1] 1 1 1 1 1 1
...
Vector of starting time :
[1] 1 1 1 1 1 1
...
Vector of time :
[1]  60  90 210 390

Number of subject :
[1] 6
> summary(Selection,3)
Loading required package: cluster
      US60                US90              US210             US390        
 Min.   :-2.768413   Min.   :-2.36952   Min.   :-2.2557   Min.   :-2.6048  
 1st Qu.:-0.231289   1st Qu.:-0.22754   1st Qu.:-0.0852   1st Qu.:-0.2729  
 Median : 0.009688   Median :-0.02436   Median : 0.8850   Median : 0.3155  
 Mean   :-0.104018   Mean   : 0.11805   Mean   : 0.7542   Mean   : 0.1994  
 3rd Qu.: 0.155536   3rd Qu.: 0.14664   3rd Qu.: 1.5365   3rd Qu.: 0.7756  
 Max.   : 2.835377   Max.   : 2.73655   Max.   : 3.0681   Max.   : 1.8034  
      US60               US90               US210             US390         
 Min.   :-2.79321   Min.   :-2.492454   Min.   :-2.6174   Min.   :-1.85720  
 1st Qu.:-0.60103   1st Qu.: 0.000062   1st Qu.:-0.1060   1st Qu.:-0.45891  
 Median :-0.35687   Median : 0.109220   Median : 0.5719   Median : 0.04641  
 Mean   :-0.33125   Mean   : 0.232778   Mean   : 0.5657   Mean   : 0.08468  
 3rd Qu.:-0.09721   3rd Qu.: 0.237079   3rd Qu.: 1.1669   3rd Qu.: 0.64055  
 Max.   : 2.29200   Max.   : 5.318566   Max.   : 3.0445   Max.   : 2.83321  
      US60                US90               US210              US390          
 Min.   :-2.944439   Min.   :-0.972128   Min.   :-1.93487   Min.   :-3.841839  
 1st Qu.:-0.208551   1st Qu.:-0.155597   1st Qu.:-0.02588   1st Qu.:-0.407941  
 Median :-0.034103   Median : 0.002283   Median : 0.67576   Median : 0.037625  
 Mean   :-0.005497   Mean   : 0.326509   Mean   : 0.79373   Mean   : 0.004927  
 3rd Qu.: 0.076594   3rd Qu.: 0.335906   3rd Qu.: 1.82659   3rd Qu.: 0.658126  
 Max.   : 3.317233   Max.   : 3.660047   Max.   : 3.56540   Max.   : 1.988571  
      US60               US90              US210             US390         
 Min.   :-2.85438   Min.   :-0.90355   Min.   :-0.5004   Min.   :-0.96834  
 1st Qu.:-0.07044   1st Qu.:-0.10104   1st Qu.:-0.0744   1st Qu.:-0.07916  
 Median : 0.01522   Median : 0.03256   Median : 0.4984   Median : 0.11127  
 Mean   : 0.04910   Mean   : 0.24052   Mean   : 0.5159   Mean   : 0.20727  
 3rd Qu.: 0.10404   3rd Qu.: 0.34912   3rd Qu.: 0.9811   3rd Qu.: 0.53894  
 Max.   : 1.82903   Max.   : 2.25638   Max.   : 2.2774   Max.   : 1.90880  
      US60               US90              US210             US390        
 Min.   :-1.38002   Min.   :-2.94444   Min.   :-1.0172   Min.   :-1.3636  
 1st Qu.:-0.20402   1st Qu.:-0.04535   1st Qu.:-0.0769   1st Qu.:-0.3322  
 Median :-0.10868   Median : 0.09461   Median : 0.6268   Median : 0.1571  
 Mean   : 0.01286   Mean   : 0.21109   Mean   : 0.6379   Mean   : 0.1038  
 3rd Qu.: 0.03625   3rd Qu.: 0.29902   3rd Qu.: 1.2214   3rd Qu.: 0.5820  
 Max.   : 2.31074   Max.   : 2.34603   Max.   : 2.5446   Max.   : 1.5979  
      US60               US90              US210             US390        
 Min.   :-1.79176   Min.   :-3.20791   Min.   :-1.1978   Min.   :-1.9588  
 1st Qu.:-0.15003   1st Qu.:-0.09256   1st Qu.:-0.1294   1st Qu.:-0.1598  
 Median :-0.00590   Median : 0.04481   Median : 0.7809   Median : 0.2099  
 Mean   : 0.09885   Mean   : 0.24100   Mean   : 0.6294   Mean   : 0.1653  
 3rd Qu.: 0.09654   3rd Qu.: 0.32625   3rd Qu.: 1.2284   3rd Qu.: 0.6642  
 Max.   : 2.95475   Max.   : 2.58118   Max.   : 2.8027   Max.   : 2.1490  
Loading required package: lattice
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Selection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:lattice’, ‘package:cluster’

> nameEx("analyze_network-methods")
> ### * analyze_network-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: analyze_network
> ### Title: Analysing the network
> ### Aliases: analyze_network analyze_network-methods
> ###   analyze_network,network-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 	data(network)
> #	analyze_network(network,nv=0)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("analyze_network-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.micro_array")
> ### * as.micro_array
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.micro_array
> ### Title: Coerce a matrix into a micro_array object.
> ### Aliases: as.micro_array
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ 	data(micro_US, package="CascadeData")
+ 	micro_US<-as.micro_array(micro_US[1:100,],time=c(60,90,210,390),subject=6)
+ 	plot(micro_US)
+ 	}
Loading required package: CascadeData
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.micro_array", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:CascadeData’

> nameEx("clustExploration-methods")
> ### * clustExploration-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clustExploration
> ### Title: A function to explore a dataset and cluster its rows.
> ### Aliases: clustExploration clustExploration-methods
> ###   clustExploration,micro_array-method
> ### Keywords: cluster
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ data(micro_S, package="CascadeData")
+ D<-as.micro_array(micro_S[1:100,],1:4,6)
+ a<-clustExploration(D)
+ }
Loading required package: CascadeData

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘DynDoc’

The following object is masked from ‘package:BiocGenerics’:

    path

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clustExploration-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:Mfuzz’, ‘package:DynDoc’, ‘package:widgetTools’,
  ‘package:tcltk’, ‘package:e1071’, ‘package:Biobase’,
  ‘package:BiocGenerics’, ‘package:parallel’, ‘package:CascadeData’

> nameEx("clustInference-methods")
> ### * clustInference-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clustInference
> ### Title: A function to explore a dataset and cluster its rows.
> ### Aliases: clustInference clustInference-methods
> ###   clustInference,micro_array,numeric-method
> ### Keywords: cluster
> 
> ### ** Examples
> 
>   if(require(CascadeData)){
+ data(micro_S, package="CascadeData")
+ D<-as.micro_array(micro_S[1:100,],1:4,6)
+ b<-clustInference(D,0.5)
+ }
Loading required package: CascadeData

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clustInference-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:Mfuzz’, ‘package:e1071’, ‘package:Biobase’,
  ‘package:BiocGenerics’, ‘package:parallel’, ‘package:CascadeData’

> nameEx("compare")
> ### * compare
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compare
> ### Title: Some basic criteria of comparison between actual and inferred
> ###   network.
> ### Aliases: compare
> 
> ### ** Examples
> 
> 	#See vignette
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compare", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cutoff-methods")
> ### * cutoff-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cutoff
> ### Title: Choose the best cutoff
> ### Aliases: cutoff cutoff-methods cutoff,network-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cutoff-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("evolution-methods")
> ### * evolution-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: evolution
> ### Title: See the evolution of the network with change of cutoff
> ### Aliases: evolution evolution-methods evolution,network-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 	data(network)
> 	sequence<-seq(0,0.2,length.out=20)
> 	evolution(network,sequence)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("evolution-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("geneNeighborhood-methods")
> ### * geneNeighborhood-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: geneNeighborhood
> ### Title: Find the neighborhood of a set of nodes.
> ### Aliases: geneNeighborhood geneNeighborhood-methods
> ###   geneNeighborhood,network-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 	#See vignette
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("geneNeighborhood-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("genePeakSelection-methods")
> ### * genePeakSelection-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: genePeakSelection
> ### Title: Methods for selecting genes
> ### Aliases: genePeakSelection geneSelection genePeakSelection-methods
> ###   geneSelection-methods geneSelection,micro_array,numeric-method
> ###   geneSelection,micro_array,micro_array,numeric-method
> ###   geneSelection,list,list,numeric-method
> ###   genePeakSelection,micro_array,numeric-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("genePeakSelection-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gene_expr_simulation")
> ### * gene_expr_simulation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gene_expr_simulation
> ### Title: Simulates microarray data based on a given network.
> ### Aliases: gene_expr_simulation gene_expr_simulation-methods
> ###   gene_expr_simulation,network-method
> 
> ### ** Examples
> 
> 	#See vignette
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gene_expr_simulation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("inference-methods")
> ### * inference-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: inference
> ### Title: Reverse-engineer the network
> ### Aliases: inference inference-methods inference,micro_array-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 	#data(micro_US)
> 	#inference(micro_US)
> 	#See vignette for more details
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("inference-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("infos")
> ### * infos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: infos
> ### Title: Details on some probesets of the affy_hg_u133_plus_2 platform.
> ### Aliases: infos
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(infos)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("infos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("micro_array-class")
> ### * micro_array-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: micro_array-class
> ### Title: Class '"micro_array"'
> ### Aliases: micro_array-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("micro_array")
Class "micro_array" [package "Patterns"]

Slots:
                                                                        
Name:  microarray       name    gene_ID      group start_time       time
Class:     matrix     vector     vector     vector     vector     vector
                 
Name:     subject
Class:    numeric
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("micro_array-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("micropred-class")
> ### * micropred-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: micropredict-class
> ### Title: Class '"micropred"'
> ### Aliases: micropredict-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("network")
Class "network" [package "Patterns"]

Slots:
                                                      
Name:  network    name       F   convF   convO time_pt
Class:  matrix  vector   array  matrix  vector  vector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("micropred-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("network-class")
> ### * network-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: network-class
> ### Title: Class '"network"'
> ### Aliases: network-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("network")
Class "network" [package "Patterns"]

Slots:
                                                      
Name:  network    name       F   convF   convO time_pt
Class:  matrix  vector   array  matrix  vector  vector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("network-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("network")
> ### * network
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: network
> ### Title: A example of an inferred network (4 groups case).
> ### Aliases: network
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(network)
> str(network)
Formal class 'network' [package "Patterns"] with 6 slots
  ..@ network: num [1:102, 1:102] 0 0 0 0 0 ...
  ..@ name   : chr [1:102] "210226_at" "233516_s_at" "202081_at" "236719_at" ...
  ..@ F      : num [1:4, 1:4, 1:16] 0 0 0 0 0 0 0 0 0 0 ...
  ..@ convF  : num [1:16, 1:9] 0.281 0.281 0.281 0.281 0.281 ...
  .. ..- attr(*, "dimnames")=List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:9] "convF" "cc" "cc" "cc" ...
  ..@ convO  : num [1:9] 0.94249 0.00961 0.00386 0.00267 0.00202 ...
  ..@ time_pt: num [1:4] 60 90 210 390
> plot(network)
Loading required package: igraph

Attaching package: ‘igraph’

The following object is masked from ‘package:Patterns’:

    compare

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

FALSE> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("network", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("network2gp")
> ### * network2gp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: network2gp
> ### Title: A example of an inferred cascade network (2 groups case).
> ### Aliases: network2gp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(network2gp)
> str(network2gp)
Formal class 'network' [package "Patterns"] with 6 slots
  ..@ network: num [1:53, 1:53] 0 -0.0169 0 0 0 ...
  ..@ name   : chr [1:53] "210226_at" "233516_s_at" "202081_at" "236719_at" ...
  ..@ F      : num [1:4, 1:4, 1:4] 0 0 0 0 0 0 0 0 0 0 ...
  ..@ convF  : num [1:4, 1:12] 0.188 0.188 0.188 0.188 NaN ...
  .. ..- attr(*, "dimnames")=List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:12] "convF" "cc" "cc" "cc" ...
  ..@ convO  : num [1:12] 1.38461 0.01744 0.00556 0.00402 0.00274 ...
  ..@ time_pt: num [1:4] 60 90 210 390
> plot(network2gp)
Loading required package: igraph

Attaching package: ‘igraph’

The following object is masked from ‘package:Patterns’:

    compare

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

FALSE> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("network2gp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("networkCascade")
> ### * networkCascade
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: networkCascade
> ### Title: A example of an inferred cascade network (4 groups case).
> ### Aliases: networkCascade
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(networkCascade)
> str(networkCascade)
Formal class 'network' [package "Patterns"] with 6 slots
  ..@ network: num [1:102, 1:102] 0 0 0 0 0 0 0 0 0 0 ...
  ..@ name   : chr [1:102] "210226_at" "233516_s_at" "202081_at" "236719_at" ...
  ..@ F      : num [1:4, 1:4, 1:16] 0 0 0 0 0 0 0 0 0 0 ...
  ..@ convF  : num [1:16, 1:5] 0.0703 0.0703 0.0703 0.0703 0.0703 ...
  .. ..- attr(*, "dimnames")=List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:5] "convF" "cc" "cc" "cc" ...
  ..@ convO  : num [1:5] 0.94249 0.00625 0.00157 0.00101 0.0008
  ..@ time_pt: num [1:4] 60 90 210 390
> plot(networkCascade)
Loading required package: igraph

Attaching package: ‘igraph’

The following object is masked from ‘package:Patterns’:

    compare

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

FALSE> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("networkCascade", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("network_random")
> ### * network_random
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: network_random
> ### Title: Generates a network.
> ### Aliases: network_random
> 
> ### ** Examples
> 
> 	#See vignette
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("network_random", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot-methods")
> ### * plot-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot-methods
> ### Title: Plot
> ### Aliases: plot-methods plot,ANY,ANY-method plot,micro_array,ANY-method
> ###   plot,micropredict,ANY-method plot,network,ANY-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ data(micro_US, package="CascadeData")
+ micro_US<-as.micro_array(micro_US[1:100,],time=c(60,90,210,390),subject=6)
+ plot(micro_US)
+ }
Loading required package: CascadeData
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:CascadeData’

> nameEx("position")
> ### * position
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: position
> ### Title: Retrieve network position for consistent plotting.
> ### Aliases: position
> ### Keywords: dplot
> 
> ### ** Examples
> 
> data(network)
> position(network)
Loading required package: igraph

Attaching package: ‘igraph’

The following object is masked from ‘package:Patterns’:

    compare

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

       nom                  
  [1,]   1 67.79035 164.3961
  [2,]   2 68.51140 164.4008
  [3,]   3 67.67356 164.8637
  [4,]   4 68.51631 164.8698
  [5,]   5 68.70284 164.9143
  [6,]   6 68.28684 164.7412
  [7,]   7 68.37436 164.0144
  [8,]   8 68.07540 164.3432
  [9,]   9 68.73878 164.6452
 [10,]  10 67.97255 164.3544
 [11,]  11 67.98141 164.7613
 [12,]  12 67.88751 164.9248
 [13,]  13 68.47802 165.0216
 [14,]  14 68.15455 165.0864
 [15,]  15 68.00503 164.9734
 [16,]  16 68.52940 164.5591
 [17,]  17 68.31631 165.3189
 [18,]  18 68.45761 165.4988
 [19,]  19 68.35687 165.0738
 [20,]  20 68.22954 164.9402
 [21,]  21 69.60152 164.5702
 [22,]  22 67.37256 164.3814
 [23,]  23 68.57835 163.1597
 [24,]  24 67.67267 163.2696
 [25,]  25 69.80562 163.6433
 [26,]  26 68.09486 164.8836
 [27,]  27 68.96337 165.2296
 [28,]  28 69.48661 163.0797
 [29,]  29 68.22478 163.2514
 [30,]  30 69.44756 164.3085
 [31,]  31 69.14169 162.8985
 [32,]  32 68.43604 163.5054
 [33,]  33 69.06423 163.6814
 [34,]  34 66.98913 163.3657
 [35,]  35 67.47325 163.8616
 [36,]  36 68.36451 162.7432
 [37,]  37 68.01399 165.2347
 [38,]  38 68.17397 163.4685
 [39,]  39 69.01957 163.9191
 [40,]  40 69.02533 164.7397
 [41,]  41 67.28082 163.9982
 [42,]  42 67.49005 164.2460
 [43,]  43 68.21121 165.5679
 [44,]  44 68.25912 164.0941
 [45,]  45 69.64885 164.9602
 [46,]  46 67.83756 163.5758
 [47,]  47 67.39875 165.0396
 [48,]  48 68.06911 165.4001
 [49,]  49 67.65279 164.4967
 [50,]  50 68.50472 163.8642
 [51,]  51 68.01809 163.6457
 [52,]  52 68.18518 165.8576
 [53,]  53 68.92028 164.9228
 [54,]  54 67.81502 165.3889
 [55,]  55 66.92502 164.3597
 [56,]  56 69.22488 165.1321
 [57,]  57 68.95163 164.4805
 [58,]  58 68.90529 165.5835
 [59,]  59 67.11982 165.6121
 [60,]  60 68.93732 164.0723
 [61,]  61 69.12768 165.3297
 [62,]  62 67.79237 165.5724
 [63,]  63 69.23580 164.6820
 [64,]  64 67.92012 164.6051
 [65,]  65 67.26715 164.4877
 [66,]  66 68.82222 163.7018
 [67,]  67 68.24389 164.4526
 [68,]  68 67.81519 163.7557
 [69,]  69 68.34779 164.4147
 [70,]  70 68.38540 164.2537
 [71,]  71 68.11104 163.8471
 [72,]  72 67.66378 165.1233
 [73,]  73 69.39578 164.9983
 [74,]  74 68.75519 165.3617
 [75,]  75 67.01137 164.8655
 [76,]  76 68.91756 164.3182
 [77,]  77 67.59707 164.7277
 [78,]  78 69.08613 164.1353
 [79,]  79 67.26994 164.9304
 [80,]  80 69.11059 165.5792
 [81,]  81 68.20188 164.6120
 [82,]  82 67.44131 164.6533
 [83,]  83 67.94305 165.9510
 [84,]  84 68.26393 163.8660
 [85,]  85 68.64016 165.8473
 [86,]  86 67.76695 164.0941
 [87,]  87 69.57168 164.1544
 [88,]  88 68.47972 164.7363
 [89,]  89 68.65465 165.5491
 [90,]  90 68.73006 163.9700
 [91,]  91 67.52376 165.4742
 [92,]  92 67.24131 164.6827
 [93,]  93 67.61795 163.9114
 [94,]  94 68.64610 163.7317
 [95,]  95 67.22872 165.2915
 [96,]  96 68.13105 164.5410
 [97,]  97 67.27981 164.1827
 [98,]  98 68.55066 164.1747
 [99,]  99 67.30820 163.6157
[100,] 100 68.65570 164.3987
[101,] 101 69.20121 164.3591
[102,] 102 68.15054 164.1456
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("position", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("predict-methods")
> ### * predict-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict
> ### Title: Methods for Function 'predict'
> ### Aliases: predict predict-methods predict,ANY-method
> ###   predict,micro_array-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("probeMerge")
> ### * probeMerge
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: probeMerge
> ### Title: Function to merge probesets
> ### Aliases: probeMerge probeMerge,micro_array-method
> ### Keywords: manip
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ data(micro_S)
+ D<-as.micro_array(micro_S[1:2000,],1:4,6)
+ D@gene_ID<-jetset::scores.hgu133plus2[D@name,"EntrezID"]
+ PM <- probeMerge(D)
+ }
Loading required package: CascadeData


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("probeMerge", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:CascadeData’

> nameEx("replaceBand")
> ### * replaceBand
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: replaceBand
> ### Title: Replace matrix values by band.
> ### Aliases: replaceBand
> ### Keywords: manip
> 
> ### ** Examples
> 
> a=matrix(1:9,3,3)
> b=matrix(0,3,3)
> replaceBand(a,b,0)
     [,1] [,2] [,3]
[1,]    0    4    7
[2,]    2    0    8
[3,]    3    6    0
> replaceBand(a,b,1)
     [,1] [,2] [,3]
[1,]    0    0    7
[2,]    0    0    0
[3,]    3    0    0
> replaceBand(a,b,2)
     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("replaceBand", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("replaceDown")
> ### * replaceDown
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: replaceDown
> ### Title: Replace matrix values triangular lower part and by band for the
> ###   upper part.
> ### Aliases: replaceDown
> ### Keywords: manip
> 
> ### ** Examples
> 
> a=matrix(1:9,3,3)
> b=matrix(1,3,3)
> replaceDown(a,b,0)
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    1    1    8
[3,]    1    1    1
> replaceDown(a,b,1)
     [,1] [,2] [,3]
[1,]    1    1    7
[2,]    1    1    1
[3,]    1    1    1
> replaceDown(a,b,2)
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("replaceDown", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("replaceUp")
> ### * replaceUp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: replaceUp
> ### Title: Replace matrix values triangular upper part and by band for the
> ###   lower part.
> ### Aliases: replaceUp
> ### Keywords: manip
> 
> ### ** Examples
> 
> a=matrix(1:9,3,3)
> b=matrix(1,3,3)
> replaceUp(a,b,0)
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    2    1    1
[3,]    3    6    1
> replaceUp(a,b,1)
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    3    1    1
> replaceUp(a,b,2)
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("replaceUp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("unionMicro-methods")
> ### * unionMicro-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: unionMicro-methods
> ### Title: Makes the union between two micro_array objects.
> ### Aliases: unionMicro unionMicro-methods
> ###   unionMicro,micro_array,micro_array-method unionMicro,list,ANY-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ data(micro_S, package="CascadeData")
+ #Create another microarray object with 100 genes
+ Mbis<-M<-as.micro_array(micro_S[1:100,],1:4,6)
+ #Rename the 100 genes
+ Mbis@name<-paste(M@name,"bis")
+ rownames(Mbis@microarray) <- Mbis@name
+ #Union (merge without duplicated names) of the two microarrays. 
+ str(unionMicro(M,Mbis))
+ }
Loading required package: CascadeData
Formal class 'micro_array' [package "Patterns"] with 7 slots
  ..@ microarray: num [1:200, 1:24] 136.1 32 78 201.8 16.3 ...
  .. ..- attr(*, "dimnames")=List of 2
  .. .. ..$ : chr [1:200] "1007_s_at" "1053_at" "117_at" "121_at" ...
  .. .. ..$ : chr [1:24] "N1_S_T60" "N1_S_T90" "N1_S_T210" "N1_S_T390" ...
  ..@ name      : chr [1:200] "1007_s_at" "1053_at" "117_at" "121_at" ...
  ..@ gene_ID   : chr [1:200] "0" "0" "0" "0" ...
  ..@ group     : num [1:200] 0 NA NA NA NA NA NA NA NA NA ...
  ..@ start_time: num [1:200] 0 NA NA NA NA NA NA NA NA NA ...
  ..@ time      : int [1:4] 1 2 3 4
  ..@ subject   : num 6
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("unionMicro-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:CascadeData’

> nameEx("unsupervised_clustering")
> ### * unsupervised_clustering
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: unsupervised_clustering
> ### Title: Cluster a micro_array object: performs the clustering.
> ### Aliases: unsupervised_clustering
> ###   unsupervised_clustering,micro_array,numeric,numeric-method
> ### Keywords: cluster
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ data(micro_S, package="CascadeData")
+ M<-as.micro_array(micro_S[1:100,],1:4,6)
+ mc<-unsupervised_clustering_auto_m_c(M)
+ MwithGrp=unsupervised_clustering(M, 8, mc$m, screen=NULL, heatmap=FALSE)
+ # Other options
+ unsupervised_clustering(M, 8, mc$m, screen=c(3,3), heatmap=TRUE)
+ plot(MwithGrp)
+ }
Loading required package: CascadeData

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("unsupervised_clustering", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:gplots’, ‘package:Mfuzz’, ‘package:e1071’,
  ‘package:Biobase’, ‘package:BiocGenerics’, ‘package:parallel’,
  ‘package:CascadeData’

> nameEx("unsupervised_clustering_auto_m_c")
> ### * unsupervised_clustering_auto_m_c
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: unsupervised_clustering_auto_m_c
> ### Title: Cluster a micro_array object: determine optimal fuzzification
> ###   parameter and number of clusters.
> ### Aliases: unsupervised_clustering_auto_m_c
> ###   unsupervised_clustering_auto_m_c,micro_array-method
> ### Keywords: cluster
> 
> ### ** Examples
> 
> if(require(CascadeData)){
+ data(micro_S, package="CascadeData")
+ M<-as.micro_array(micro_S[1:100,],1:4,6)
+ mc<-unsupervised_clustering_auto_m_c(M)
+ }
Loading required package: CascadeData

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("unsupervised_clustering_auto_m_c", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:Mfuzz’, ‘package:e1071’, ‘package:Biobase’,
  ‘package:BiocGenerics’, ‘package:parallel’, ‘package:CascadeData’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  15.647 0.853 16.673 0.005 0.006 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
